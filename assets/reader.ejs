<!DOCTYPE html>
<html>
<head>
  <style>
    iframe {
      border-style: none;
    }

    body {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
    }

  </style>
</head>
<body>

  <!-- injection point for chapter -->
  <div id="chapter">
  </div>

  <!-- navigation buttons -->
  <div>
    <button id="prev" onclick="prev();">Prev</button>
    <button id="next" onclick="next();">Next</button>
  </div>

  <script>
  // variables filled by the server based on request
  var book = <%- book %>;
  var readerWidth = <%- readerWidth %>;
  var readerHeight = <%- readerHeight %>;

  // create an iframe with the given width and heigth
  var chapterElement = document.querySelector('#chapter');
  var iframe = document.createElement('iframe');
  iframe.height = readerHeight;
  iframe.width = readerWidth;
  chapterElement.appendChild(iframe);

  // navigation buttons
  var prevButton = document.querySelector('#prev');
  var nextButton = document.querySelector('#next');

  // set the initial chapter to the first one and disable back button
  var currentChapter = 0;
  prevButton.disabled = true;

  /**
   * Navigates to the specified chapter.
   *
   * @param {number|string} chapter - The chapter to navigate to. Either a number or a URL.
   * @param {string} [hash] - The hash within the chapter to navigate to. Only applicaple if chapter is a URL.
   */
  function navigate(chapter, hash) {
    if (typeof chapter !== 'number') {
      chapter = book.chapters.findIndex(e => e.href.slice(5) === chapter);
    }

    if (chapter < 0) return;

    iframe.contentWindow.document.open();
    iframe.contentWindow.window.scrollTo(0, 0);
    iframe.contentWindow.document.write(atob(book.chapters[chapter].html));
    paginate(iframe.contentWindow.document, readerHeight, readerWidth);
    iframe.contentWindow.location.hash = hash || '';
    iframe.contentWindow.document.close();

    currentChapter = chapter;
  }

  // display initial chapter
  navigate(currentChapter);

  /**
   * Goes back one chapter.
   */
  function prev() {
    currentChapter--;
    navigate(currentChapter);

    prevButton.disabled = (currentChapter - 1 < 0);
    nextButton.disabled = (currentChapter + 1 >= book.chapters.length);
  }

  /**
   * Goes forward one chapter.
   */
  function next() {
    currentChapter++;
    navigate(currentChapter);

    prevButton.disabled = (currentChapter - 1 < 0);
    nextButton.disabled = (currentChapter + 1 >= book.chapters.length);
  }

  /**
   * Paginates the provided chapter.
   *
   * @param {HTMLDocument} document - The document to paginate.
   * @param {number} width - The width of the viewport.
   * @param {number} height - The height of the viewport.
   */
  function paginate(document, height, width) {
    var body = document.getElementsByTagName('body')[0];
    var style = body.currentStyle || window.getComputedStyle(body);
    var gap = 2 * style.marginLeft.slice(0,-2);
    var totalHeight = body.offsetHeight;
    var pageCount = Math.floor(totalHeight/height) + 1;
    body.style.columnGap = gap + 'px';
    body.style.width = width * pageCount + 'px';
    body.style.height = height + 'px';
    body.style.columnWidth = width-gap + 'px';
    body.style.overflow = 'scroll';
    document.styleSheets[0].addRule('::-webkit-scrollbar', 'display: none');

    // redefine link behavior to navigate within book
    for (var ls = document.links, numLinks = ls.length, i=0; i<numLinks; i++){
      ls[i].onclick = (e) => {
        e.preventDefault();

        var url = document.createElement('a');
        url.href = e.target.href;
        navigate(url.pathname, url.hash);
      };
    }
  }

  </script>
</body>
</html>